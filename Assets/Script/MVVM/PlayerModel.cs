using NUnit.Framework;
using System.Collections.Generic;

using UnityEngine;

public class PlayerModel
{
    public NPCModel NPCModel { get; set; }
    public WeaponModel weaponModel { get; set; }
    public string Name { get; set; }
    public float Health { get; set; }
    public float MaxHealth { get; set; } // 플레이어의 최대 체력 
    public float MaxMP { get; set; } // 플레이어의 최대 마나
    public float MP { get; set; } // 플레이어의 마나
    public float Attack { get; set; }
    public float Speed { get; set; }
    
    public float JumpForce { get; set; }  // 점프 힘 13 
    public float FallMultiplier { get; set; } //= 2.5f; // 낙하 시 중력 가중치 3.5
    public float LowJumpMultiplier { get; set; }// = 2.5f; // 최소 점프 높이 2
    
    public int FacingDirection { get; set; } // 플레이어가 바라보는 방향 0: 오른쪽, 1: 왼쪽

    public float RotationSpeed { get; set; } //= 10f; // 회전 속도 10

    public bool IsPlayerMoving { get; set; } // 플레이어가 움직이고 있는지 여부

    public bool IsParrying { get; set; } // 플레이어가 방어 중인지 여부

    public bool IsGrounded { get; set; } // = true; // 플레이어가 땅에 있는지 여부
    public bool IsRolling { get; set; } // 플레이어가 구르고 있는지 여부

    public bool IsDamaged { get; set; } // 플레이어가 데미지를 받았는지 여부   
    public bool HasParried { get; set; } // 플레이어가 방어를 했는지 여부    

    public bool HasJumpAttacked { get; set; } // 플레이어가 점프 공격을 했는지 여부
    public bool IsGuarding { get; set; } // 플레이어가 방어 중인지 여부 

    public float rollDistance = 13f; // 플레이어 구르기 거리  

    public float rollSpeed = 8f; // 플레이어 구르기 속도

    public float rollTime = 1.2f; // 플레이어 구르기 시간

    public bool IsChaged { get; set; } // 플레이어가 충전 중인지 여부   
    public Animator Animator { get; set; } // 플레이어 애니메이터
    public Quaternion TargetRotation { get; set; } // 플레이어 회전값 10

    [SerializeField] public float maxChargeTime = 3f; // 총 차지 시간
    public float chargeTime = 0f;
    public int currentLevel = 0;

    public GameObject resourceObject;
    public bool IsAttacking { get; set; }
    public bool IsGathering { get; private set; }
    public bool IsNpcMeeting { get; private set; }
    public ItemData CurrentItem { get; private set; }
    public List<InventoryData> GetItemList = new List<InventoryData>();
    public Material playerMaterial;

    public void StartAttack(WeaponController weapon, AttackModel attackModel)
    {
        weapon.EnableDamage(attackModel);
        if(attackModel.Type == AttackType.Skill) TutorialManager.isUseSkill = true;

    }
    public void EndAttack(WeaponController weapon)
    {
        weapon.DisableDamage();
    }
    public void StartNPCTrigger(NPCModel npcModel)
    {
        NPCModel = npcModel;
        npcModel.PlayerModel = this;
        NPCModel.isTrigger = true;
        IsNpcMeeting = true;
    }
    public void CompleteNPCTrigger()
    {
        NPCModel = null;
        IsNpcMeeting = false;
    }
    public void StartGathering(ItemData ore, GameObject obj)
    {
        CurrentItem = ore;
        IsGathering = true;
        resourceObject = obj;
    }

    public void CompleteGathering()
    {
        IsGathering = false;
        CurrentItem = null;
        resourceObject = null;
    }
    public PlayerModel(string name, Material playerMat) //테스트 셋업용
    {
        weaponModel = new WeaponModel();

        Name = name;
        Health = 200f;
        MaxHealth = 200f;
        MP = 50f; // 플레이어의 마나
        MaxMP = 50f; // 플레이어의 최대 마나
        Attack = 5f;
        Speed = 9f;
        JumpForce = 15f; // 점프 힘
        FallMultiplier = 3.5f; // 낙하 시 중력 가중치
        LowJumpMultiplier = 2f; // 최소 점프 높이
        RotationSpeed = 17f; // 회전 속도
        IsGrounded = true; // 플레이어가 땅에 있는지 여부
        TargetRotation = Quaternion.identity; // 초기 회전값
        IsAttacking = false;
        IsRolling = false; // 플레이어가 구르고 있는지 여부

        playerMaterial = playerMat;
        playerMaterial.SetColor("_EmissionColor", Color.white * 1.0f);
    }
}
